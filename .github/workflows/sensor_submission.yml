name: Sensor Submission

on:
  issues:
    types: [opened]

jobs:
  process_submission:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Extract issue details
        id: extract_details
        run: |
          echo "vendor=$(echo "${{ github.event.issue.body }}" | grep -oP '(?<=Vendor: ).*')" >> $GITHUB_ENV
          echo "custom_vendor=$(echo "${{ github.event.issue.body }}" | grep -oP '(?<=Custom Vendor: ).*')" >> $GITHUB_ENV
          echo "camera=$(echo "${{ github.event.issue.body }}" | grep -oP '(?<=Camera: ).*')" >> $GITHUB_ENV
          echo "resolution_type=$(echo "${{ github.event.issue.body }}" | awk '/Resolution Type:/{flag=1;next}/---/{flag=0}flag')" >> $GITHUB_ENV

      - name: Debug extracted data
        run: |
          echo "Event body: ${{ github.event.issue.body }}"
          echo "Vendor: ${{ env.vendor }}"
          echo "Custom Vendor: ${{ env.custom_vendor }}"
          echo "Camera: ${{ env.camera }}"
          echo "Resolution Type: ${{ env.resolution_type }}"

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Validate and process submission
        run: |
          VENDOR="$VENDOR"
          CUSTOM_VENDOR="$CUSTOM_VENDOR"
          CAMERA="$CAMERA"
          RESOLUTION_TYPE="$RESOLUTION_TYPE"
          
          if [ "$VENDOR" == "Custom" ]; then
            VENDOR="$CUSTOM_VENDOR"
          fi
          
          if [ -z "$VENDOR" ] || [ -z "$CAMERA" ] || [ -z "$RESOLUTION_TYPE" ]; then
            echo "Missing required fields."
            exit 1
          fi
          
          # Convert the resolution types to JSON format
          RESOLUTION_JSON=$(echo "$RESOLUTION_TYPE" | python3 -c "
          import sys, json
          data = sys.stdin.read()
          resolutions = []
          for block in data.strip().split('\n\n'):
              resolution = {}
              for line in block.strip().split('\n'):
                  if ':' in line:
                      key, value = [x.strip() for x in line.split(':', 1)]
                      if key.lower() in ['resolution', 'mm', 'inch']:
                          width, height = [float(x) for x in value.split('x')]
                          resolution[key.lower()] = {'width': width, 'height': height}
                      elif key.lower() == 'type':
                          resolution['type'] = value
                      else:
                          resolution[key.lower().replace(' ', '_')] = value
              resolutions.append(resolution)
          print(json.dumps(resolutions, indent=2))
          ")

          # Update sensors.json using jq
          jq -n --arg vendor "$VENDOR" --arg camera "$CAMERA" --argjson resolutions "$RESOLUTION_JSON" '
            (input // {}) as $json |
            ($json[$vendor] //= {}) |
            ($json[$vendor][$camera] //= {}) |
            reduce ($resolutions[] | .type) as $type (.; .[$vendor][$camera][$type] = $resolutions[] | select(.type == $type))
          ' sensors.json > sensors_tmp.json
          
          mv sensors_tmp.json sensors.json

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: 'Add new sensor data'
          title: '[New Sensor] Add $CAMERA from $VENDOR'
          body: |
            This pull request adds a new sensor entry for $CAMERA from $VENDOR.
          labels: submission
          branch: add-sensor-${{ github.event.issue.number }}

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
