name: Sensor Submission

on:
  issues:
    types: [opened]

jobs:
  process_submission:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set ImageMagick environment variables
        run: |
          export MAGICK_HOME="/path/to/ImageMagick"
          export MAGICK_CODER_MODULE_PATH="$MAGICK_HOME/modules-Q16/coders"
          export MAGICK_CONFIGURE_PATH="$MAGICK_HOME/etc/ImageMagick-6"
          export MAGICK_TMPDIR="/tmp"

      - name: Extract issue details
        id: info
        run: |
          VENDOR=$(echo "${{ github.event.issue.body }}" | awk '/### Vendor/{flag=1;next}/^###/{flag=0}flag' | tail -n +2)
          echo "vendor=$VENDOR" >> $GITHUB_ENV

          CUSTOM_VENDOR=$(echo "${{ github.event.issue.body }}" | awk '/### Custom Vendor/{flag=1;next}/^###/{flag=0}flag' | tail -n +2)
          echo "custom_vendor=$CUSTOM_VENDOR" >> $GITHUB_ENV

          CAMERA=$(echo "${{ github.event.issue.body }}" | awk '/### Camera/{flag=1;next}/^###/{flag=0}flag' | tail -n +2)
          echo "camera=$CAMERA" >> $GITHUB_ENV

          RESOLUTION_TYPE=$(echo "${{ github.event.issue.body }}" | awk '/### Resolution Type/{flag=1;next}/^###/{flag=0}flag' | tail -n +2)
          echo "resolution_type<<EOF" >> $GITHUB_ENV
          echo "$RESOLUTION_TYPE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Debug extracted data
        run: |
          echo "Event Body: ${{ github.event.issue.body }}"
          echo "Vendor: ${{ env.vendor }}"
          echo "Custom Vendor: ${{ env.custom_vendor }}"
          echo "Camera: ${{ env.camera }}"
          echo "Resolution Type: ${{ env.resolution_type }}"

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Process and update JSON with Python
        run: |
          VENDOR="${{ env.vendor }}"
          CUSTOM_VENDOR="${{ env.custom_vendor }}"
          CAMERA="${{ env.camera }}"
          RESOLUTION_TYPE="${{ env.resolution_type }}"

          if [ "$VENDOR" == "Custom" ]; then
            VENDOR="$CUSTOM_VENDOR"
          fi

          if [ -z "$VENDOR" ] || [ -z "$CAMERA" ] || [ -z "$RESOLUTION_TYPE" ]; then
            echo "Missing required fields."
            exit 1
          fi

          # Convert the resolution types to JSON format using Python
          RESOLUTION_JSON=$(echo "$RESOLUTION_TYPE" | python3 -c "
          import sys, json
          data = sys.stdin.read()
          resolutions = []
          for block in data.strip().split('\\n\\n'):
              resolution = {}
              for line in block.strip().split('\\n'):
                  if ':' in line:
                      key, value = [x.strip() for x in line.split(':', 1)]
                      if key.lower() in ['resolution', 'mm', 'inch']:
                          width, height = [float(x) for x in value.split('x')]
                          resolution[key.lower()] = {'width': width, 'height': height}
                      elif key.lower() == 'type':
                          resolution['type'] = value
                      else:
                          resolution[key.lower().replace(' ', '_')] = value
              resolutions.append(resolution)
          print(json.dumps(resolutions, indent=2))
          ")

          # Read existing sensors.json file
          if [ -f sensors.json ]; then
            SENSORS=$(cat sensors.json)
          else
            SENSORS="{}"
          fi

